#imports
import urllib.parse
import hashlib
from backports.pbkdf2 import pbkdf2_hmac
from Crypto.Cipher import AES
import base64
import json

#take in cookie
#take in name of app
cookie = input("please supply a cookie: ")
name = input("please supply name of application: ")

#get md5hash
nameToHash = (name+"::Application").encode()
nameHash = hashlib.md5(nameToHash)
#keygen
its = 1000
keylen = 32
salt = "authenticated encrypted cookie".encode()
key = hashlib.pbkdf2_hmac("sha1", nameHash.hexdigest().encode(), salt, its, keylen)

#encypting plaintext
def encrypt(text,key,nonce):
    encObj = AES.new(key, AES.MODE_GCM,nonce)
    cipherText, authTag = encObj.encrypt_and_digest(text.encode())
    return(cipherText, authTag)
#decrypt valid cookie
def decrypt(cipherT, key, authTag, nonce):
    encObj = AES.new(key,AES.MODE_GCM, nonce)
    text = encObj.decrypt_and_verify(cipherT, authTag)
    return(text)

cookie = urllib.parse.unquote(cookie)
# encdata--iv--authtag
cookieArr = cookie.split("--")

decData = decrypt(base64.b64decode(cookieArr[0]), key, base64.b64decode(cookieArr[2]), base64.b64decode(cookieArr[1]))

print(decData)

data = json.loads(decData)
data['user_id'] = 1
jsonData = json.dumps(data)
print(jsonData)

encData, authTag = encrypt(jsonData,key, base64.b64decode(cookieArr[1]))

cookie = base64.b64encode(encData).decode() + "--" + cookieArr[1] + "--" + base64.b64encode(authTag).decode()
print(urllib.parse.quote_plus(cookie))
